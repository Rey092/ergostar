[tool.poetry]
name = "ergostar"
version = "0.1.0"
description = ""
authors = ["Your Name <you@example.com>"]
readme = "README.md"
package-mode = false

[tool.poetry.dependencies]
python = "^3.12"
litestar = { extras = ["jinja", "sqlalchemy", "standard", "structlog"], version = "^2.10.0" }
litestar-vite = "^0.1.22"
fastapi-storages = "^0.3.0"
dishka = "^1.2.0"  # dependency injection
factory-boy = "^3.3.0"
python-multipart = "^0.0.9"  # for file uploads
advanced-alchemy = "^0.17.3"
cashews = "^7.1.0"  # cache
uuid-utils = "^0.9.0"
python-jose = "^3.3.0"
cryptography = "^43.0.0" # crypto algorithms
# structures
pydantic = "^2.7.4" # data validation
pydantic-settings = "^2.3.3"  # settings
wtforms = "^3.1.2"
# server
uvicorn = "^0.30.1"
gunicorn = "^22.0.0"
# drivers
asyncpg = "^0.29.0"  # for sqlalchemy
psycopg2-binary = "^2.9.9"  # for django
hvac = "^2.3.0"  # vault
redis = { extras = ["hiredis"], version = "^5.0.6" }  # redis as cahce/broker + hiredis for performance
aiofiles = "^23.2.1"  # for file uploads
sqlalchemy = { extras = ["mypy"], version = "^2.0.31" }
sqlalchemy-file = "^0.6.0"  # todo: do something with it
# django
django = "^5.0.6"  # django
django-environ = "^0.11.2"  # env vars
django-unfold = "^0.34.0"  # admin interface


[tool.poetry.group.dev.dependencies]
aiosqlite = "^0.20.0"
pytest = "^8.2.2"
pytest-asyncio = "^0.23.7"
pre-commit = "^3.7.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


# ==== pytest ====
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--import-mode=importlib"
python_files = [
    "tests.py",
    "test_*.py",
]
pythonpath = "."

# ==== mypy ====
[tool.mypy]
python_version = "3.12"
check_untyped_defs = true
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "*/migrations/*.py",
    "staticfiles/*"
]
fix = true
line-length = 88
indent-width = 4
target-version = "py312"

[tool.ruff.lint]
select = [
    "F",
    "E",
    "W",
    "C90",
    "I",
    "N",
    "UP",
    "YTT",
    # "ANN", # flake8-annotations: we should support this in the future but 100+ errors atm
    "ASYNC",
    "D",
    "S",
    "BLE",
    "FBT",
    "B",
    "A",
    "COM",
    "C4",
    "DTZ",
    "T10",
    "DJ",
    "EM",
    "EXE",
    "FA",
    'ISC',
    "ICN",
    "G",
    'INP',
    'PIE',
    "T20",
    'PYI',
    'PT',
    "Q",
    "RSE",
    "RET",
    "SLF",
    "SLOT",
    "SIM",
    "TID",
    "TCH",
    "INT",
    # "ARG", # Unused function argument
    "PTH",
    "ERA",
    "PD",
    "PGH",
    "PL",
    "TRY",
    "FLY",
    # "NPY",
    # "AIR",
    "PERF",
    # "FURB",
    # "LOG",
    "RUF"
]
ignore = [
    "RUF012", # ruff - mutable class attributes should be annotated with `typing.ClassVar`
    "PLR0913", # too many arguments
]
# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []
# The fixes in extend-unsafe-fixes will require
# provide the `--unsafe-fixes` flag when fixing.
extend-unsafe-fixes = [
    "UP038"
]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.mccabe]
max-complexity = 12

[tool.ruff.lint.pep8-naming]
classmethod-decorators = [
    "classmethod",
    "sqlalchemy.ext.declarative.declared_attr",
    "sqlalchemy.orm.declared_attr.directive",
    "sqlalchemy.orm.declared_attr",
]

[tool.ruff.lint.per-file-ignores]
"*/migrations/*.py" = ['D104', 'D103', 'D205', 'D212']
"__init__.py" = ['F401', 'D104']
"docs/**/*.*" = ["S", "B", "DTZ", "A", "TCH", "ERA", "D", "RET", "E731", "RUF012", "FA100", "ARG001"]
"docs/conf.py" = ["FIX002", "ARG001", "INP001"]
"scripts/**/*.*" = ["D", "ARG", "EM", "TRY", "G", "FBT", "INP001"]
"scripts/*.py" = ["INP001", "ERA001"]
"src/app/db/migrations/versions/*.py" = ["ANN201", "INP001"]
"tests/*.py" = ['D103', 'S101', 'D104']
"settings.py" = ["N802", "EM101", "TRY003"]

[tool.slotscheck]
strict-imports = false

[tool.codespell]
ignore-words-list = "alog"
skip = 'pdm.lock, package-lock.json'

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
force-single-line = true
known-first-party = ['tests', 'src']

[tool.pyright]
exclude = ["scripts", "docs"]
include = ["src/app", "tests"]
